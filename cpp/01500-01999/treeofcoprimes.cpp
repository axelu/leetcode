
// 1766. Tree of Coprimes
// https://leetcode.com/problems/tree-of-coprimes/

/*
        // precalc coprimes
        vector<int> _coprimes[51];
        for(int i = 1; i < 51; ++i)
            for(int j = 1; j < 51; ++j)
                if( i == 1 || i + 1 == j || gcd(i,j) == 1 )
                    _coprimes[i].push_back(j);
        for(int i = 1; i < 51; ++i) {
            for(int j = 0; j < _coprimes[i].size(); ++j) {
                if( j == 0 ) cout << "{";
                if( j > 0 ) cout << ",";
                cout << _coprimes[i][j];
            }
            cout << "}" << endl;
        }
*/

class Solution {
private:
    // recursive function to return gcd of a and b
    long long gcd(long long int a, long long int b) {
        if( b == 0 )
            return a;
        return gcd(b,a % b);
    }

    vector<int> _coprimes[51] =
        {{},
        {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50},
        {1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49},
        {1,2,4,5,7,8,10,11,13,14,16,17,19,20,22,23,25,26,28,29,31,32,34,35,37,38,40,41,43,44,46,47,49,50},
        {1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49},
        {1,2,3,4,6,7,8,9,11,12,13,14,16,17,18,19,21,22,23,24,26,27,28,29,31,32,33,34,36,37,38,39,41,42,43,44,46,47,48,49},
        {1,5,7,11,13,17,19,23,25,29,31,35,37,41,43,47,49},
        {1,2,3,4,5,6,8,9,10,11,12,13,15,16,17,18,19,20,22,23,24,25,26,27,29,30,31,32,33,34,36,37,38,39,40,41,43,44,45,46,47,48,50},
        {1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49},
        {1,2,4,5,7,8,10,11,13,14,16,17,19,20,22,23,25,26,28,29,31,32,34,35,37,38,40,41,43,44,46,47,49,50},
        {1,3,7,9,11,13,17,19,21,23,27,29,31,33,37,39,41,43,47,49},
        {1,2,3,4,5,6,7,8,9,10,12,13,14,15,16,17,18,19,20,21,23,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,45,46,47,48,49,50},
        {1,5,7,11,13,17,19,23,25,29,31,35,37,41,43,47,49},
        {1,2,3,4,5,6,7,8,9,10,11,12,14,15,16,17,18,19,20,21,22,23,24,25,27,28,29,30,31,32,33,34,35,36,37,38,40,41,42,43,44,45,46,47,48,49,50},
        {1,3,5,9,11,13,15,17,19,23,25,27,29,31,33,37,39,41,43,45,47},
        {1,2,4,7,8,11,13,14,16,17,19,22,23,26,28,29,31,32,34,37,38,41,43,44,46,47,49},
        {1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49},
        {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50},
        {1,5,7,11,13,17,19,23,25,29,31,35,37,41,43,47,49},
        {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,39,40,41,42,43,44,45,46,47,48,49,50},
        {1,3,7,9,11,13,17,19,21,23,27,29,31,33,37,39,41,43,47,49},
        {1,2,4,5,8,10,11,13,16,17,19,20,22,23,25,26,29,31,32,34,37,38,40,41,43,44,46,47,50},
        {1,3,5,7,9,13,15,17,19,21,23,25,27,29,31,35,37,39,41,43,45,47,49},
        {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,47,48,49,50},
        {1,5,7,11,13,17,19,23,25,29,31,35,37,41,43,47,49},
        {1,2,3,4,6,7,8,9,11,12,13,14,16,17,18,19,21,22,23,24,26,27,28,29,31,32,33,34,36,37,38,39,41,42,43,44,46,47,48,49},
        {1,3,5,7,9,11,15,17,19,21,23,25,27,29,31,33,35,37,41,43,45,47,49},
        {1,2,4,5,7,8,10,11,13,14,16,17,19,20,22,23,25,26,28,29,31,32,34,35,37,38,40,41,43,44,46,47,49,50},
        {1,3,5,9,11,13,15,17,19,23,25,27,29,31,33,37,39,41,43,45,47},
        {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50},
        {1,7,11,13,17,19,23,29,31,37,41,43,47,49},
        {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50},
        {1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49},
        {1,2,4,5,7,8,10,13,14,16,17,19,20,23,25,26,28,29,31,32,34,35,37,38,40,41,43,46,47,49,50},
        {1,3,5,7,9,11,13,15,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49},
        {1,2,3,4,6,8,9,11,12,13,16,17,18,19,22,23,24,26,27,29,31,32,33,34,36,37,38,39,41,43,44,46,47,48},
        {1,5,7,11,13,17,19,23,25,29,31,35,37,41,43,47,49},
        {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50},
        {1,3,5,7,9,11,13,15,17,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49},
        {1,2,4,5,7,8,10,11,14,16,17,19,20,22,23,25,28,29,31,32,34,35,37,38,40,41,43,44,46,47,49,50},
        {1,3,7,9,11,13,17,19,21,23,27,29,31,33,37,39,41,43,47,49},
        {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,42,43,44,45,46,47,48,49,50},
        {1,5,11,13,17,19,23,25,29,31,37,41,43,47},
        {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,45,46,47,48,49,50},
        {1,3,5,7,9,13,15,17,19,21,23,25,27,29,31,35,37,39,41,43,45,47,49},
        {1,2,4,7,8,11,13,14,16,17,19,22,23,26,28,29,31,32,34,37,38,41,43,44,46,47,49},
        {1,3,5,7,9,11,13,15,17,19,21,25,27,29,31,33,35,37,39,41,43,45,47,49},
        {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,48,49,50},
        {1,5,7,11,13,17,19,23,25,29,31,35,37,41,43,47,49},
        {1,2,3,4,5,6,8,9,10,11,12,13,15,16,17,18,19,20,22,23,24,25,26,27,29,30,31,32,33,34,36,37,38,39,40,41,43,44,45,46,47,48,50},
        {1,3,7,9,11,13,17,19,21,23,27,29,31,33,37,39,41,43,47,49}};

    void dfs(vector<int> g[], int u, int par, int lvl, vector<int>& nums, vector<pair<int,int>> seen[], vector<int>& ans) {
        // cout << "dfs u " << u << " val " << nums[u] << endl;
        
        int val = nums[u];
        int lst_lvl = -1;
        int t = -1;
        for(int& coprime : _coprimes[val]) {
            // level that this coprime was last seen
            if( !seen[coprime].empty() && seen[coprime].back().first > lst_lvl ) {
                lst_lvl = seen[coprime].back().first;
                t = seen[coprime].back().second;
            }
        }
        ans[u] = t;
        
        // add current node
        seen[val].push_back({lvl,u});
        
        for(int i = 0; i < g[u].size(); ++i) {
            int v = g[u][i];
            // don't go back to parent
            if( v == par )
                continue;
            
            dfs(g,v,u,lvl+1,nums,seen,ans);
        }
        
        // backtrack
        seen[val].pop_back();
    }
    
    
    
public:
    vector<int> getCoprimes(vector<int>& nums, vector<vector<int>>& edges) {
        int n = nums.size();
        
        vector<int> g[n]; // connected, undirected graph that has no cycles
        for(auto& v : edges) {
            g[v[0]].push_back(v[1]);
            g[v[1]].push_back(v[0]);
        }
                
        vector<int> ans(n);       
        
        vector<pair<int,int>> seen[51];
        dfs(g,0,-1,0,nums,seen,ans);
        
        return ans;
    }
};
