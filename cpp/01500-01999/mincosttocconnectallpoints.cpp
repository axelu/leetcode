
// 1584. Min Cost to Connect All Points
// https://leetcode.com/problems/min-cost-to-connect-all-points/




#include <iostream>
#include <cassert>
#include <chrono>

#include <vector>
#include <string>
#include <numeric>
#include <unordered_map>
#include <unordered_set>
#include <algorithm>
#include <set>
#include <iterator>
#include <queue>
#include <cstdlib>
#include <ctime>
#include <cstdio>
#include <map>


using namespace std;
//234567890123456789012345678901234567890123456789012345678901234567890123456789

class Solution {
private:
    int * parent;

    int md(vector<int>& p1, vector<int>& p2) {
            // manhattan distance |xi - xj| + |yi - yj|
            return abs(p1[0] - p2[0]) + abs(p1[1] - p2[1]);
    }

    int findRoot(int i) {
		// chase parent of current element until it reaches root

        while(parent[i] != i) {
            // path compression
            // set each i to point to its grandparent
            // (thereby halving the path length), where i
            // is the node which comes in between path,
            // while computing root
            parent[i] = parent[parent[i]] ;
            i = parent[i];
        }
		return i;
	}

	bool unite(int p, int c) {
		p = findRoot(p);
		c = findRoot(c);
        if( p == c ) return false;
		parent[c] = p;
        return true;
	}

public:
    int minCostConnectPoints(vector<vector<int>>& points) {
        // 1 <= points.length <= 1000
        auto n = points.size();
        if( n == 1 ) return 0;
        if( n == 2 ) {
            return md(points[0], points[1]);
        }

        vector<array<int,3>> edges; // all edges
        for(int i = 0; i < n - 1; ++i)
            for(int j = i + 1; j < n; ++j) {
                int dis = md(points[i], points[j]);
                edges.push_back({dis,i,j});
            }
        make_heap(edges.begin(),edges.end(),greater<array<int,3>>()); // min heap

        parent = new int[n];
        for(int i = 0; i < n; ++i) parent[i] = i;
        int r = 0;
        int edgecount = 0;
        auto it = edges.begin();
        while( edgecount < n - 1 ) {
            // move top element to back
            pop_heap(edges.begin(),edges.end(),greater<array<int,3>>());
            auto edge = edges.back(); // get 'former' top element
            edges.pop_back();         // remove 'former' top element
            if( unite(edge[1],edge[2]) ) {
                r += edge[0];
                ++edgecount;
            }
            ++it;
        }

        delete[] parent;
        return r;
    }
};

int main() {

    chrono::time_point<chrono::system_clock> start;
    chrono::time_point<chrono::system_clock> end;
    chrono::duration<double> elapsed_seconds;

    // start = chrono::system_clock::now();
    // do something
    // end = chrono::system_clock::now();
    // elapsed_seconds = end - start;
    // cout << "elapsed_seconds " << elapsed_seconds.count() << endl;

    Solution s;
/*
    int xi = -1000000;
    int yi = -1000000;
    int xj =  1000000;
    int yj =  1000000;

    // manhattan distance |xi - xj| + |yi - yj|
    int md = abs(xi - xj) + abs(yi - yj);
    cout << md << endl;

    cout << RAND_MAX << endl; // 2147483647 == INT_MAX
*/

    vector<vector<int>> points;
    int r;

    points = {{0,0},{2,2},{3,10},{5,2},{7,0}};
    cout << endl << "{{0,0},{2,2},{3,10},{5,2},{7,0}}" << endl;
    r = s.minCostConnectPoints(points);
    cout << "result " << r << endl;
    assert(r == 20);

    points = {{3,12},{-2,5},{-4,1}};
    cout << endl << "{{3,12},{-2,5},{-4,1}}" << endl;
    r = s.minCostConnectPoints(points);
    cout << "result " << r << endl;
    assert(r == 18);

    points = {{0,0},{1,1},{1,0},{-1,1}};
    cout << endl << "{{0,0},{1,1},{1,0},{-1,1}}" << endl;
    r = s.minCostConnectPoints(points);
    cout << "result " << r << endl;
    assert(r == 4);

    points = {{-1000000,-1000000},{1000000,1000000}};
    cout << endl << "{{-1000000,-1000000},{000000,1000000}}" << endl;
    r = s.minCostConnectPoints(points);
    cout << "result " << r << endl;
    assert(r == 4000000);

    points = {{0,0}};
    cout << endl << "{{0,0}}" << endl;
    r = s.minCostConnectPoints(points);
    cout << "result " << r << endl;
    assert(r == 0);

    points = {{0,0},{-1,0},{0,1},{1,0},{0,-1}};
    cout << endl << "{{0,0},{-1,0},{0,1},{1,0},{0,-1}};" << endl;
    r = s.minCostConnectPoints(points);
    cout << "result " << r << endl;
    assert(r == 4);

    points = {{0,0},{-1,0},{1,1},{1,0},{-1,-1}};
    cout << endl << "{{0,0},{-1,0},{1,1},{1,0},{-1,-1}}" << endl;
    r = s.minCostConnectPoints(points);
    cout << "result " << r << endl;
    assert(r == 4);

    points = {{-359204,433084},{609466,368271},{304472,-860814},{11051,-44546},{772164,402073},{371236,-486998},{930030,933315},{349307,-652570},{-145032,845810},{666985,-288560},{-743615,185373},{492473,-923059},{811272,-114222},{-784539,-790666},{634764,489228},{-775428,-724441},{-77689,-648537},{-838744,-773217},{8075,689733},{699663,297664},{91805,588325},{810666,21835},{-960936,677398},{886691,-105967},{-959368,-928900},{-877102,-702983},{256474,615372},{-626042,585171},{-498851,-410580},{794506,-346662},{-403927,-463497},{446324,518385},{405392,607580},{-737407,-586534},{297312,962256},{711130,-93457},{-931995,521795},{-554197,-892930},{716619,-150081},{518529,757251},{-78981,641427},{-945732,-305082},{256798,-54348},{-719911,-724628},{-947503,-407980},{-71289,-351429},{128523,-107540},{-833045,-466086},{-499961,-570452},{-52620,-685224},{-90771,175935},{738745,-22765},{215155,-298027},{601731,-68227},{551892,120259},{-310976,-9663},{-238315,260718},{685255,-464091},{-793631,965344},{-188719,-741133},{-442637,-742583},{424864,-796689},{149877,591819},{254651,-832659},{-461208,-280544},{-517882,448021},{895391,-261712},{-57319,110546},{440262,-455589},{-440256,-7847},{-817905,766194},{982490,-56219},{26911,-814830},{479690,750707},{-332061,-191604},{-473001,742729},{583240,951863},{946040,250542},{543681,200691},{417884,-400102},{920147,-582573},{-952082,815538},{673141,-9400},{443509,113402},{-947564,-996748},{-377019,-765468},{769447,-394530},{695739,313783},{308066,692854},{64489,976006},{18675,-891087},{718734,-398086},{-939225,664773},{-630118,-878119},{382889,-694809},{-278221,303036},{240044,-230302},{635999,-86816},{-722277,596933},{-973414,-152415},{-882390,166993},{599543,887057},{-710112,812707},{718266,597955},{505560,300180},{573960,-475765},{409094,810119},{643575,987295},{992317,-469118},{-890824,375206},{-163927,-169045},{195667,-406458},{-881922,349091},{506727,-86773},{-53977,-949262},{-721762,63633},{217731,877781},{468116,507619},{690488,703807},{105573,713473},{3986,196958},{-244867,-69495},{7076,-601292},{-82200,-607},{447016,544402},{-107976,-716911},{-107218,-912310},{-123369,10861},{954207,-99217},{-558487,417655},{-48479,-280249},{-518713,-313323},{114958,-533172},{-288278,-194555},{-311940,-665280},{36343,-790528},{531679,791477},{139977,56180},{-292390,-424798},{-427002,-845375},{-880397,465022},{-44860,12386},{-929863,831772},{-459328,-458231},{249980,499611},{959424,-281073},{-263212,-41863},{405604,851746},{942391,-365249},{174616,-369549},{-30528,-789042},{-160077,18576},{-997566,-502675},{-925245,-289956},{72528,165180},{-135330,709557},{147627,819810},{239368,217765},{-830994,-702535},{759534,936413},{797077,718958},{-344661,-466136},{194520,-421632},{-614391,136910},{213120,-922350},{767361,-817409},{-711392,-392717},{201167,-191531},{622035,793348},{518513,211988},{-41473,-99392},{-78456,-893846},{237844,-839088},{841345,924276},{-24197,600878},{860688,-227121},{837261,-483974},{306743,31780},{94395,-790223},{-831310,-692486},{-712573,-546524},{7531,93462},{578186,-791303},{901931,200220},{-997956,420443},{-587793,477998},{-161523,333751},{584152,-406254},{-987912,425496},{-481979,-12108},{543799,-621291},{-721804,381060},{412161,-897635},{-69735,23981},{-687858,616381},{848921,116996},{-930143,-143549},{-789543,648043},{582574,-887613},{365688,584619},{-949745,777895},{580042,406158},{629071,164193},{999904,-841415},{-410312,-482075},{663903,-866514},{414060,942099},{-968029,343646},{-955537,479663},{-632373,-125968},{613469,-783453},{991028,-799249},{590425,-281090},{-633781,172998},{-168703,731907},{275042,398978},{-972774,-144917},{-194864,656298},{-980725,322465},{814883,126389},{-642185,478785},{777302,771875},{938309,-673302},{115521,982773},{806361,-999427},{-143196,937256},{-782880,365257},{-861994,-675030},{-915834,-495774},{497969,432889},{-763868,-226990},{349292,-219215},{-854481,-328147},{-562918,-317780},{994319,-230610},{808610,-647867},{-234400,585911},{-875992,-296092},{912609,756955},{204106,-763605},{757528,-421665},{-826350,-507927},{-538983,-170918},{-182956,-454817},{333308,-167562},{-504503,-913134},{-877127,844790},{-132349,-731608},{-483358,822159},{-49387,-489040},{108974,276648},{380520,874574},{-137442,-978047},{95907,292592},{778908,-182561},{-953588,-946140},{913200,-262512},{63359,-625783},{566571,-602172},{436826,417304},{230266,932324},{-978405,353140},{-705462,406672},{-861043,-188820},{228830,89570},{839567,-662197},{-633783,737512},{-270198,746201},{759465,-656865},{556219,-944203},{160574,-879944},{-890343,73773},{-142455,690442},{965416,-58459},{-911730,402242},{-123730,318536},{851991,-102134},{189101,-853472},{-695463,328059},{475134,533368},{-582372,832126},{-611404,301272},{569637,635825},{564898,329101},{978960,121116},{384898,656959},{241173,-988020},{248157,-383857},{702423,213573},{-924891,-691882},{133240,-48621},{626654,-14770},{849245,-184245},{649184,-328792},{-338761,641743},{-277999,78867},{473869,110597},{-102436,560931},{263847,-537538},{-109968,242806},{-898997,-207645},{-100236,859602},{321762,-852079},{-6830,541610},{878920,68279},{849728,12159},{-980342,476381},{-485186,-613672},{-190439,-836003},{57536,988226},{805740,779537},{584519,279608},{407560,-517918},{357965,-328594},{461970,-752004},{-568362,562974},{557777,848828},{940001,-120462},{-485826,-66829},{-578853,-606907},{-998551,-211700},{405252,-461467},{-217893,-562509},{442288,-890907},{-398512,17249},{-902681,-75346},{-203214,681838},{-278313,-278229},{-836081,-920349},{910603,-856685},{-672353,-140334},{-776286,-597150},{-291506,-836286},{799814,222668},{96885,-261613},{615762,615761},{526687,538439},{-845707,-691207},{975931,596581},{-582113,94844},{-386170,-484794},{-980503,928042},{-802957,-258815},{167238,-121612},{-179164,595266},{539129,665910},{-545068,762843},{-931241,163426},{926558,-614002},{-613907,23442},{124385,-480720},{-360798,-348928},{-424855,310922},{-40135,-448925},{424928,895178},{-836656,-443817},{-589617,-817158},{1650,124852},{-75973,-831113},{-479334,-737712},{-718421,-940206},{928198,-263489},{822638,-485618},{-582638,-733380},{-99619,320881},{290062,-975235},{840162,-553310},{193263,-67268},{-724963,-329446},{483807,699965},{-434269,-835424},{-226426,493541},{-652582,775224},{-381608,788871},{-538463,656484},{-948841,-256884},{716279,-503218},{997053,-943659},{11165,-585586},{-677039,-571029},{735295,-869552},{-28838,-907119},{94564,-318149},{25613,887027},{352405,26845},{-895583,918136},{191422,-122009},{929102,538840},{-346786,64920},{845137,114751},{-278597,896296},{-624708,-44893},{-89497,-627656},{528874,-560907},{-213242,851835},{-131936,39479},{-500291,-643348},{132360,-888302},{38503,-324601},{998726,-91667},{702244,-896858},{343894,411091},{-18867,272996},{467357,-848228},{-662085,312493},{783950,59318},{726214,-840759},{-468149,-363284},{-468414,-939276},{75810,835770},{-570015,-538701},{-124752,-70306},{335377,-474966},{558818,-626121},{717859,557543},{282212,937528},{-821890,143532},{348619,676669},{-583473,-184025},{828442,-245558},{-354107,-870184},{-668815,-110468},{-193517,-136964},{526248,855495},{-76239,119483},{691265,353746},{-901792,83938},{-199135,433585},{-873603,-640318},{807465,844256},{-565349,607102},{781784,-387239},{-249367,130402},{-710570,684586},{-536198,-364703},{-560973,627121},{-234887,287639},{-483348,-910979},{-849326,-439675},{944517,591861},{-802766,635781},{-54394,-704558},{237144,746471},{729027,363542},{-893847,-946084},{207797,58230},{-821556,507006},{670991,446503},{154833,-522154},{131089,618635},{113143,-912459},{763181,-604319},{375180,-202742},{-515297,-956720},{357584,-570781},{635141,554818},{-417575,-419253},{-632315,-663006},{-155357,-903289},{-782039,468222},{-331946,943185},{-473549,-153502},{450190,-802558},{-189574,-394977},{-324712,941515},{-258917,-694143},{-453518,-495736},{-298462,921662},{301522,703667},{964942,176531},{-349689,600083},{248774,750162},{-301745,616459},{-912844,542898},{-769404,-177457},{11120,-101350},{-234273,-945004},{-737427,-784083},{-747562,72999},{-179060,445153},{531940,-920552},{751010,-921579},{-416288,-30027},{-482492,-597340},{191066,-124},{-903384,841377},{117384,862817},{-891036,815639},{479275,-286454},{875962,-772704},{536089,404507},{643372,-698184},{459504,-576630},{-482267,-770633},{496370,856099},{674520,545735},{935547,942955},{-858419,36685},{-87072,176515},{956771,-378581},{-823610,-429188},{-537205,293774},{-566372,89185},{626838,-569671},{802731,502800},{-342375,338820},{-92694,-181577},{-841939,-115765},{241793,-324206},{113603,255588},{49318,305548},{-198678,-15136},{248503,460329},{-461026,-321144},{-363156,-504256},{300275,-186766},{583983,-719505},{-375566,-982390},{369681,-748729},{-552061,689837},{-728504,622991},{28656,696229},{-558587,186717},{-419537,683206},{-620064,694066},{-61206,429254},{-386,-742459},{-68456,-234458},{717871,470518},{444398,-645286},{-516312,262098},{685374,-932330},{-939982,-690193},{-914720,429699},{78505,50646},{119536,350001},{191062,-334383},{46229,632475},{-630240,626693},{833106,267122},{838184,289325},{-303624,355223},{546867,-854655},{-879236,782163},{615863,-917413},{-863124,-383024},{862111,-660325},{-315354,922130},{-350517,287353},{869254,-754587},{-144576,-11211},{595414,-436089},{-828168,-358357},{-286189,59018},{-214239,-453084},{-673861,141370},{836242,539941},{-503407,900534},{685286,134783},{682696,818575},{734797,-663003},{-47024,596907},{-323328,-844952},{519036,843581},{959827,388290},{-911007,-184750},{-105496,-798167},{896587,583762},{360902,-389603},{-357221,-335912},{157313,486345},{805458,510980},{26285,-697950},{928939,228997},{954260,611634},{564997,689056},{-533944,-482028},{803388,142729},{190446,322424},{503735,150272},{228139,-889846},{-517053,-877358},{-688013,-620467},{-776170,672889},{-10070,384035},{-663024,-335331},{-129621,-340141},{-824352,-585910},{479336,-377987},{-839488,433595},{-766354,725509},{640076,-300297},{-239094,443463},{-640143,-531222},{-234114,-618983},{619050,-488550},{-508829,-898003},{151519,320584},{-1044,375349},{510898,988887},{-240617,-634701},{170981,-852812},{25159,864055},{-438722,-495506},{-513933,-278210},{-544486,-280286},{-35276,-904411},{936843,-756945},{539052,-185875},{-288167,-177636},{712568,-151691},{333814,-796261},{467732,-514668},{-958252,-533313},{-621894,552647},{-27001,654916},{917946,-856021},{802104,460530},{-991966,-119193},{965024,-505899},{602597,-579463},{731241,84746},{33552,-814492},{845227,-427396},{517059,74486},{912394,229627},{922795,763633},{950792,907952},{-233609,992540},{-625362,144497},{545186,865064},{-200588,980558},{-990958,118941},{441087,-465498},{999748,923537},{28604,-880231},{-138501,277270},{721941,895052},{980205,567168},{-14919,497263},{159079,-102526},{-273111,599299},{178532,195106},{507250,944923},{187646,-600687},{89420,250257},{-735624,-593743},{230814,-209155},{-957376,189327},{325347,-957629},{112863,-128624},{-320433,974362},{-333928,-598493},{-613162,-353724},{-513900,889345},{-856462,645179},{304244,387854},{761903,-517224},{-417041,269152},{-572302,-711970},{-814109,-965457},{-944287,-32307},{-559199,286527},{758538,851},{-6721,601311},{43222,-893859},{-9888,-759786},{-402071,656184},{-358278,502193},{-697541,645248},{391538,-36576},{290427,-304219},{-131297,52329},{178557,969088},{-161093,606256},{-742882,24798},{640799,-169743},{992491,-400975},{-883217,-731546},{599876,627489},{-612810,160524},{733630,377302},{400738,-151016},{550912,-440115},{-648823,-629204},{-794867,-739860},{334220,-987015},{-44079,-279652},{582740,-348096},{-310564,-60928},{-741841,463980},{-518705,-583617},{-705764,-8788},{532835,-71555},{259666,132710},{-444067,-835719},{-189341,-193011},{541583,-271177},{-826602,609920},{288708,-475425},{980717,-988734},{302141,832362},{-458323,-741938},{-447290,-875583},{-90034,242146},{580915,685551},{223551,-937790},{-380641,517787},{53422,-847807},{-553769,-169487},{802330,519591},{-5206,-387012},{-673421,53802},{341811,-500023},{-336278,147945},{541979,-355562},{159211,-155881},{-5775,700889},{619607,546935},{-657269,46998},{306506,923646},{-267452,-469944},{985856,869334},{-952158,39277},{-978474,11500},{-612785,823856},{-468910,382009},{-563156,-142331},{-46763,-703920},{875072,616959},{444025,417050},{-221178,-396764},{-221405,-709528},{-178450,-601799},{837408,164281},{445200,143913},{87926,-304827},{-808605,591208},{-435494,-243337},{147910,-413967},{768163,535126},{-72686,-183322},{434560,364158},{674347,-612204},{660239,-933156},{-477820,621689},{483894,818428},{-775076,-737512},{-891100,46474},{178116,946308},{-789246,-376685},{607646,816107},{318488,799041},{407314,-599580},{73130,-444777},{-13547,-158708},{-392226,913767},{657971,-957666},{795351,849743},{-52444,973015},{916587,469737},{594703,917907},{288164,819628},{-302180,397064},{383527,875936},{860797,-888293},{16676,468443},{-554761,-147410},{784909,852553},{253010,-141962},{-74799,-760538},{-783244,-949599},{-329346,874727},{-907265,-533996},{-758106,40291},{-43556,-324093},{27453,-448853},{111239,-684383},{-111800,809059},{-769894,-728274},{-797580,-909097},{-99141,219096},{-923229,346098},{-410889,-620895},{716076,842121},{237144,158703},{-918418,971326},{209104,269663},{-636523,301839},{-746908,-394629},{-140445,209537},{798704,887009},{-721891,-90058},{-279949,166309},{236427,-49843},{955461,438847},{41060,373746},{175368,117831},{-280157,764480},{-985638,-46655},{606600,768932},{-887953,-794392},{740257,321151},{992697,-896267},{140415,-754212},{226530,-482605},{972751,25234},{-595597,-749141},{-547399,124454},{934594,689028},{-407963,890055},{645300,633097},{263800,338094},{268354,-498932},{102573,282716},{454413,226598},{569073,-916115},{949632,309329},{922462,-540247},{930488,62876},{-294458,157017},{-902303,195718},{-300324,-497900},{446578,152278},{-856020,381171},{358731,253443},{788651,4031},{403965,569876},{-140450,-327682},{-929056,962123},{-527541,-957218},{706146,-958469},{-355906,-826797},{868286,-433445},{-367044,798773},{-853143,855924},{-44210,-755446},{51642,-827109},{264080,15645},{842595,925486},{-85759,201326},{178928,-297108},{-277218,-417107},{-209807,582332},{772637,-138863},{-938121,-237478},{421346,-714550},{321479,-934561},{-541347,189765},{149420,609036},{-11463,296277},{464959,-538248},{540831,-483400},{152070,322337},{-950330,-5336},{247822,-36088},{-286585,-55824},{-815771,436197},{527069,-25578},{535954,817131},{-647015,-884742},{-420348,774331},{-599291,901132},{-642805,376788},{608322,506615},{-14177,114284},{320318,-549218},{576037,378574},{484808,245532},{-299090,534479},{-759805,-533842},{15816,-46389},{410334,200045},{-92767,454828},{-825534,-39387},{271958,-472549},{75871,-630964},{-180793,994006},{-212407,176402},{370794,-604086},{200443,-643384},{510198,-479240},{324824,603660},{899334,327058},{-150809,117670},{-138464,89387},{583828,-605223},{-439577,-5839},{594822,985082},{-33586,769288},{-54306,-244203},{-185835,-461009},{124833,633372},{-467004,912426},{327200,903790},{-174235,45068},{-222168,-664037},{565828,-379919},{939623,982587},{947139,-211186},{100256,326100},{-604374,201509},{720877,473475},{-286905,315698},{458556,679509},{602412,-78324},{-564694,-583424},{978093,-922436},{-432627,-488912},{-492584,894573},{-67696,333181},{-60360,-772439},{669144,22893},{-152358,-873808},{522906,-205219},{432432,-376839},{-879120,-654517},{-657904,-640817},{818958,55191},{674881,794939},{252126,277292},{234040,687432},{-788707,212132},{-717579,-221333},{723221,-210163},{-326761,172950},{-876982,-869695},{400511,-690413},{670624,-751848},{-564221,193529},{560359,868211},{-665884,681240},{-786307,-323788},{-959578,-449924},{731403,-767272},{-654985,-16472},{-972554,579055},{188385,-761261},{-208813,988233},{17406,31833},{-221931,-791929},{-795218,418513},{-144198,605293},{728101,-473575},{-629130,-836121},{719955,931230},{-450484,-945930},{-870106,-236791},{-269718,-829684},{313286,-20890},{-79530,-824274},{-519936,-52084},{-727794,-814126},{186656,580819},{-825894,-278513},{-387349,469602},{446984,334859},{-111886,-697215},{-59849,-383786},{-170789,828448},{297520,66591},{759677,847036},{638087,889571},{-389756,-114206},{-422688,-559045},{864904,497782},{134107,-137607},{-554302,406314},{565694,-850221},{-12868,-742775},{388692,-882791},{726827,-164324},{452068,132367},{655887,-90355},{-733994,2523},{-261908,563526},{-930887,15194},{410561,707200},{-95236,-461769},{-407007,482076},{496612,-24677},{497283,-369281},{-644859,-539594},{-445542,920835},{127611,-940985},{-821940,-483697},{-306350,-577688},{869405,-854282},{-927896,525291},{572789,-661889},{-472186,-689120},{901637,114353},{843500,829624},{-178447,-251737},{-632146,931972},{-252236,-618109},{424720,-754954},{530036,779862},{-294547,-915507},{-781879,-649511}};
    cout << endl << "{{-359204,433084},{609466,368271},{304472,-860814},...}" << endl;
    start = chrono::system_clock::now();

    r = s.minCostConnectPoints(points);

    end = chrono::system_clock::now();
    elapsed_seconds = end - start;
    cout << "elapsed_seconds " << elapsed_seconds.count() << endl;
    cout << "result " << r << endl;
    assert(r == 52520022);
/*
    // generate 1000 unique points on the plane -1000000, -1000000, 1000000, 1000000
    points = {};
    srand(time(nullptr)); // use current time as seed for random generator
    for(int i = 0; i < 1000; ++i) {

        int r1, r2;
        vector<int> p;
        do {
            p = {};
            r1 = rand() % 2000001 - 1000000; // random in the range -1000000 to 1000000
            r2 = rand() % 2000001 - 1000000; // random in the range -1000000 to 1000000
            p.push_back(r1);  p.push_back(r2);
        } while( find(points.begin(),points.end(),p) != points.end());
        points.push_back(p);
    }

    cout << endl << "1000 random" << endl;
    start = chrono::system_clock::now();
    r = s.minCostConnectPoints(points);
    end = chrono::system_clock::now();
    elapsed_seconds = end - start;
    cout << "elapsed_seconds " << elapsed_seconds.count() << endl;
    cout << "result " << r << endl;

    string spts = "[";
    for(auto it = points.begin(); it != points.end(); ++it) {
        if( it != points.begin() )
            spts += ",";
        spts += "[" + to_string(it->at(0)) + "," + to_string(it->at(1)) + "]";
    }
    spts += "]";
    cout << spts << endl;
*/

    return 0;
}
